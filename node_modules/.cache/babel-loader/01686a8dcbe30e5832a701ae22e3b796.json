{"ast":null,"code":"import React, { Component } from 'react'; // import '../App.css';\n\nimport '../assets/css/alfa_style.css';\nimport '../assets/css/signup.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nvar Twitter = require('twitter');\n\nconst express = require('express');\n\nconst server = express();\nserver.use(express.json());\nvar client = new Twitter({\n  consumer_key: 'kJCHFwe6tK2mun5eHiZacFrlO',\n  consumer_secret: '7aPQt2dayjANxGWblcJdrzrNEkHYfMY1UgVmM1XLLfJKzG228g',\n  bearer_token: 'AAAAAAAAAAAAAAAAAAAAAOWGOQEAAAAAJwCs06VN8gZH55quJSFxHY4u86U%3DA6rzoVv0VS7rIavStklsqknNoqADTth6jLRa8XBlyED0QsR39O'\n});\n\nclass TwitterComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      accounts: []\n    };\n  }\n\n}\n\nexport default TwitterComponent;\nlet searchParam = {\n  q: 'auto repair',\n  count: 5\n};\nclient.get('search/tweets', searchParam, function (error, data, response) {\n  if (error) {\n    console.log(\"Didn't work!\");\n  } else {\n    let statuses = data.statuses;\n\n    for (let i = 0; i < 50; i++) {\n      console.log(statuses[i].text);\n    } // statuses.map((el)=>{console.log(el.text)})\n    // console.log(statuses);\n\n  }\n}); // client.get('search/tweets', searchParam, function (error, data, response) {\n// let searchParam = { q: 'hat', count: 50 };\n// server.get('/api/tweets/:auto%20repair', function (request, response) {\n//     var keyword = request.params.keyword;\n//     client.get('search/tweets', { q: keyword, count: 50 }, function (error, data, response) {\n//         if (error) {\n//             console.log(\"Didn't work!\")\n//         } else {\n//             let statuses = data.statuses;\n//             for (let i = 0; i < 50; i++) {\n//                 console.log(statuses[i].text)\n//             }\n//         }\n//     })\n// });\n// server.listen(5000, () => {\n//     console.log(\"Connected to port 5000!\");\n// });","map":{"version":3,"sources":["/home/john/AlfaTest/AlfaFinal/frontend/src/components/tweets.js"],"names":["React","Component","Twitter","require","express","server","use","json","client","consumer_key","consumer_secret","bearer_token","TwitterComponent","constructor","state","accounts","searchParam","q","count","get","error","data","response","console","log","statuses","i","text"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAO,8BAAP;AACA,OAAO,0BAAP;AACA,OAAO,sCAAP;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,MAAM,GAAGD,OAAO,EAAtB;AACAC,MAAM,CAACC,GAAP,CAAWF,OAAO,CAACG,IAAR,EAAX;AAEA,IAAIC,MAAM,GAAG,IAAIN,OAAJ,CAAY;AACrBO,EAAAA,YAAY,EAAE,2BADO;AAErBC,EAAAA,eAAe,EAAE,oDAFI;AAGrBC,EAAAA,YAAY,EAAE;AAHO,CAAZ,CAAb;;AAMA,MAAMC,gBAAN,SAA+BX,SAA/B,CAAyC;AACrCY,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AADD,KAAb;AAGH;;AANoC;;AAYzC,eAAeH,gBAAf;AAIA,IAAII,WAAW,GAAG;AAAEC,EAAAA,CAAC,EAAE,aAAL;AAAoBC,EAAAA,KAAK,EAAE;AAA3B,CAAlB;AACAV,MAAM,CAACW,GAAP,CAAW,eAAX,EAA4BH,WAA5B,EAAyC,UAAUI,KAAV,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;AACtE,MAAIF,KAAJ,EAAW;AACPG,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,GAFD,MAEO;AACH,QAAIC,QAAQ,GAAGJ,IAAI,CAACI,QAApB;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,EAAhB,EAAmBA,CAAC,EAApB,EAAuB;AACnBH,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACC,CAAD,CAAR,CAAYC,IAAxB;AACH,KAJE,CAKH;AACA;;AACH;AACJ,CAXD,E,CAcA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\n// import '../App.css';\nimport '../assets/css/alfa_style.css';\nimport '../assets/css/signup.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nvar Twitter = require('twitter');\nconst express = require('express');\nconst server = express();\nserver.use(express.json());\n\nvar client = new Twitter({\n    consumer_key: 'kJCHFwe6tK2mun5eHiZacFrlO',\n    consumer_secret: '7aPQt2dayjANxGWblcJdrzrNEkHYfMY1UgVmM1XLLfJKzG228g',\n    bearer_token: 'AAAAAAAAAAAAAAAAAAAAAOWGOQEAAAAAJwCs06VN8gZH55quJSFxHY4u86U%3DA6rzoVv0VS7rIavStklsqknNoqADTth6jLRa8XBlyED0QsR39O'\n});\n\nclass TwitterComponent extends Component {\n    constructor() {\n        super();\n        this.state = {\n            accounts: []\n        };\n    }\n\n\n\n}\n\nexport default TwitterComponent;\n\n\n\nlet searchParam = { q: 'auto repair', count: 5 };\nclient.get('search/tweets', searchParam, function (error, data, response) {\n    if (error) {\n        console.log(\"Didn't work!\")\n    } else {\n        let statuses = data.statuses;\n        for (let i=0; i<50;i++){\n            console.log(statuses[i].text)\n        }\n        // statuses.map((el)=>{console.log(el.text)})\n        // console.log(statuses);\n    }\n})\n\n\n// client.get('search/tweets', searchParam, function (error, data, response) {\n\n// let searchParam = { q: 'hat', count: 50 };\n\n// server.get('/api/tweets/:auto%20repair', function (request, response) {\n//     var keyword = request.params.keyword;\n//     client.get('search/tweets', { q: keyword, count: 50 }, function (error, data, response) {\n//         if (error) {\n//             console.log(\"Didn't work!\")\n//         } else {\n//             let statuses = data.statuses;\n//             for (let i = 0; i < 50; i++) {\n//                 console.log(statuses[i].text)\n//             }\n//         }\n//     })\n// });\n\n// server.listen(5000, () => {\n//     console.log(\"Connected to port 5000!\");\n// });"]},"metadata":{},"sourceType":"module"}